---
name: Deploy Azure TRE Resuable

on:
  workflow_call:
    inputs:
      prRepo:
        description: Name of the repo GitHub repo containing the ref (as org/repo)
        type: string
        required: false
      prRef:
        description: The git ref to checkout
        type: string
        required: false
      prHeadSha:
        description: For PR builds where GITHUB_REF isn't set to the PR (e.g. comment trigger), pass the PR's head SHA commit here
        type: string
        required: false
      ciGitRef:
        description: The git ref to use in annotations to associate a deployment with the code that triggered it
        type: string
        required: true
    secrets:
      AAD_TENANT_ID:
        required: true
      ACR_NAME:
        required: true
      ACTIONS_ACR_NAME:
        required: true
      ACTIONS_ACR_URI:
        required: true
      ACTIONS_ACR_PASSWORD:
        required: true
      ACTIONS_DEVCONTAINER_TAG:
        required: true
      API_CLIENT_ID:
        required: true
      API_CLIENT_SECRET:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      CORE_ADDRESS_SPACE:
        required: true
      LOCATION:
        required: true
      MGMT_RESOURCE_GROUP:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: true
      STATE_STORAGE_ACCOUNT_NAME:
        required: true
      SWAGGER_UI_CLIENT_ID:
        required: true
      TEST_APP_ID:
        required: true
      TEST_USER_NAME:
        required: true
      TEST_USER_PASSWORD:
        required: true
      TEST_WORKSPACE_APP_ID:
        required: true
      TF_STATE_CONTAINER:
        required: true
      TRE_ADDRESS_SPACE:
        required: true
      TRE_ID:
        required: true
      CI_CACHE_ACR_NAME:
        required: false

# This will prevent multiple runs of this entire workflow.
# We should NOT cancel in progress runs as that can destabilize the environment.
concurrency: "deploy-${{ inputs.ciGitRef }}"

jobs:
  deploy_management:
    name: Deploy Management
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: Show inputs
        run: |
          echo "Inputs"
          echo "======"
          echo "prRepo    : ${{ inputs.prRepo }}"
          echo "prRef     : ${{ inputs.prRef }}"
          echo "prRHeadSha: ${{ inputs.prHeadSha }}"
          echo "ciGitRef  : ${{ inputs.ciGitRef }}"

      - name: Checkout (default)
        if: ${{ inputs.prRepo == '' }} # if not running for a PR, checkout the default ref for the workflow run
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Checkout (PR)
        if: ${{ inputs.prRepo != '' }} # if running for a PR, checkout the PR commit
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: ${{ inputs.prRepo }}
          ref: ${{ inputs.prRef }}

      - name: Set up Docker BuildKit
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACTIONS_ACR_URI }}
          username: ${{ secrets.ACTIONS_ACR_NAME }}
          password: ${{ secrets.ACTIONS_ACR_PASSWORD }}

      - name: Build new devcontainer
        shell: bash
        env:
            DOCKER_BUILDKIT: 1
        run: |
          set -e
          USER_UID=$(id -u)
          USER_GID=$(id -g)
          docker build . \
            -t 'tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }}' \
            -f '.devcontainer/Dockerfile' \
            --cache-from ${{ secrets.ACTIONS_ACR_URI }}tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }} \
            --cache-from ${{ secrets.ACTIONS_ACR_URI }}tredev:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg USER_UID="${USER_UID}" \
            --build-arg USER_GID="${USER_GID}"
          docker image tag tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }} \
            ${{ secrets.ACTIONS_ACR_URI }}tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }}

      - name: Deploy management
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make bootstrap && make mgmt-deploy"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name:
            ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: "${{ secrets.MGMT_RESOURCE_GROUP }}"
          TF_VAR_mgmt_storage_account_name:
            ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"

      # - name: Notify dedicated teams channel
      #   uses: sachinkundu/ms-teams-notification@1.4
      #   if: ${{ failure() && (github.ref == 'refs/heads/main' && inputs.prRef == '') }}
      #   with:
      #     github-token: ${{ github.token }}
      #     ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
      #     notification-summary: "Deploy TRE Failed"
      #     notification-color: dc3545
      #     timezone: Europe/Zurich

      - name: Push cached devcontainer
        if: ${{ success() }}
        shell: bash
        run: |
          set -e
          docker image push \
            ${{ secrets.ACTIONS_ACR_URI }}tredev:${{ secrets.ACTIONS_DEVCONTAINER_TAG }}

  build_core_images:
    # used to build images used by core infrastructure
    name: Build Core Docker Images
    runs-on: ubuntu-latest
    needs: [deploy_management]
    environment: Dev
    strategy:
      fail-fast: true
      matrix:
        target: [
          build-and-push-api,
          build-and-push-resource-processor,
          build-and-push-gitea]

    steps:
      - name: Checkout (default)
        if: ${{ inputs.prRepo == '' }} # if not running for a PR, checkout the default ref for the workflow run
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Checkout (PR)
        if: ${{ inputs.prRepo != '' }} # if running for a PR, checkout the PR commit
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: ${{ inputs.prRepo }}
          ref: ${{ inputs.prRef }}

      - name: Docker build
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make ${{ matrix.target }}"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          CI_CACHE_ACR_NAME: ${{ secrets.CI_CACHE_ACR_NAME}}

      # - name: Notify dedicated teams channel
      #   uses: sachinkundu/ms-teams-notification@1.4
      #   if: ${{ failure() && (github.ref == 'refs/heads/main' && inputs.prRef == '') }}
      #   with:
      #     github-token: ${{ github.token }}
      #     ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
      #     notification-summary: "Make Core Images Failed"
      #     notification-color: dc3545
      #     timezone: Europe/Zurich

  deploy_tre:
    name: Deploy TRE
    runs-on: ubuntu-latest
    needs: [build_core_images]
    environment: Dev
    steps:
      - name: Checkout (default)
        if: ${{ inputs.prRepo == '' }} # if not running for a PR, checkout the default ref for the workflow run
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Checkout (PR)
        if: ${{ inputs.prRepo != '' }} # if running for a PR, checkout the PR commit
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: ${{ inputs.prRepo }}
          ref: ${{ inputs.prRef }}

      - run: exit 1

      - name: Deploy TRE Core
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "TF_VAR_ci_git_ref=${{ inputs.ciGitRef }} make deploy-core"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_USER_NAME: "${{ secrets.TEST_USER_NAME }}"
          TEST_USER_PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name:
            ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name:
            ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_keyvault_purge_protection_enabled: "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"
          TF_VAR_stateful_resources_locked: "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"

      - name: Install Firewall
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make firewall-install"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_USER_NAME: "${{ secrets.TEST_USER_NAME }}"
          TEST_USER_PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name:
            ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name:
            ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_keyvault_purge_protection_enabled: "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"
          TF_VAR_stateful_resources_locked: "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"

      - name: Install Nexus
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make nexus-install"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_USER_NAME: "${{ secrets.TEST_USER_NAME }}"
          TEST_USER_PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name:
            ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name:
            ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_keyvault_purge_protection_enabled: "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"
          TF_VAR_stateful_resources_locked: "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"

      - name: Install Gitea
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make gitea-install"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_USER_NAME: "${{ secrets.TEST_USER_NAME }}"
          TEST_USER_PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: ${{ secrets.LOCATION }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TF_VAR_terraform_state_container_name:
            ${{ secrets.TF_STATE_CONTAINER }}
          TF_VAR_mgmt_resource_group_name: ${{ secrets.MGMT_RESOURCE_GROUP }}
          TF_VAR_mgmt_storage_account_name:
            ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
          TF_VAR_core_address_space: ${{ secrets.CORE_ADDRESS_SPACE }}
          TF_VAR_tre_address_space: ${{ secrets.TRE_ADDRESS_SPACE }}
          TF_VAR_swagger_ui_client_id: "${{ secrets.SWAGGER_UI_CLIENT_ID }}"
          TF_VAR_api_client_id: "${{ secrets.API_CLIENT_ID }}"
          TF_VAR_api_client_secret: "${{ secrets.API_CLIENT_SECRET }}"
          TF_VAR_keyvault_purge_protection_enabled: "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"
          TF_VAR_stateful_resources_locked: "${{ github.ref == 'refs/heads/main' && inputs.prRef == '' && true || false }}"

      # - name: Notify dedicated teams channel
      #   uses: sachinkundu/ms-teams-notification@1.4
      #   if: ${{ failure() && (github.ref == 'refs/heads/main' && inputs.prRef == '') }}
      #   with:
      #     github-token: ${{ github.token }}
      #     ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
      #     notification-summary: "Deploy TRE Failed"
      #     notification-color: dc3545
      #     timezone: Europe/Zurich

  publish_bundles:
    name: Publish Bundles
    runs-on: ubuntu-latest
    needs: [deploy_management]
    strategy:
      matrix:
        include:
        # bundles type can be inferred from the bundle
        # dir (but this is more explicit)
          - {BUNDLE_TYPE: "workspace",
             BUNDLE_DIR: "./templates/workspaces/base"}
          - {BUNDLE_TYPE: "workspace",
             BUNDLE_DIR: "./templates/workspaces/innereye"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/guacamole"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/azureml"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/devtestlabs"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/innereye"}
    environment: Dev
    steps:
      - name: Checkout (default)
        if: ${{ inputs.prRepo == '' }} # if not running for a PR, checkout the default ref for the workflow run
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Checkout (PR)
        if: ${{ inputs.prRepo != '' }} # if running for a PR, checkout the PR commit
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.prRepo }}
          ref: ${{ inputs.prRef }}

      - name: Publish bundle
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make bundle-publish DIR=${{ matrix.BUNDLE_DIR }}"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}

  build_additional_images:
    # used to build images NOT used by core infrastructure
    name: Build Additional Docker Images
    runs-on: ubuntu-latest
    needs: [deploy_management]
    environment: Dev
    strategy:
      fail-fast: true
      matrix:
        target: [build-and-push-guacamole]

    steps:
      - name: Checkout (default)
        if: ${{ inputs.prRepo == '' }} # if not running for a PR, checkout the default ref for the workflow run
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Checkout (PR)
        if: ${{ inputs.prRepo != '' }} # if running for a PR, checkout the PR commit
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: ${{ inputs.prRepo }}
          ref: ${{ inputs.prRef }}

      - name: Docker build
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make ${{ matrix.target }}"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          CI_CACHE_ACR_NAME: ${{ secrets.CI_CACHE_ACR_NAME}}

      # - name: Notify dedicated teams channel
      #   uses: sachinkundu/ms-teams-notification@1.4
      #   if: ${{ failure() && (github.ref == 'refs/heads/main' && inputs.prRef == '') }}
      #   with:
      #     github-token: ${{ github.token }}
      #     ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
      #     notification-summary: "Make Additional Images Failed"
      #     notification-color: dc3545
      #     timezone: Europe/Zurich

  register_bundles:
    name: Register Bundles
    runs-on: ubuntu-latest
    needs: [deploy_tre, publish_bundles]
    strategy:
      matrix:
        include:
        # bundles type can be inferred from the bundle
        # dir (but this is more explicit)
          - {BUNDLE_TYPE: "workspace",
             BUNDLE_DIR: "./templates/workspaces/base"}
          - {BUNDLE_TYPE: "workspace",
             BUNDLE_DIR: "./templates/workspaces/innereye"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/guacamole"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/azureml"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/devtestlabs"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/innereye"}
    environment: Dev
    steps:
      - name: Checkout (default)
        if: ${{ inputs.prRepo == '' }} # if not running for a PR, checkout the default ref for the workflow run
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Checkout (PR)
        if: ${{ inputs.prRepo != '' }} # if running for a PR, checkout the PR commit
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: ${{ inputs.prRepo }}
          ref: ${{ inputs.prRef }}

      - name: Register bundle
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make bundle-register DIR=${{ matrix.BUNDLE_DIR }}"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_USER_NAME: "${{ secrets.TEST_USER_NAME }}"
          TEST_USER_PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          LOCATION: "${{ secrets.LOCATION }}"
          BUNDLE_TYPE: ${{ matrix.BUNDLE_TYPE }}

  e2e_tests_smoke:
    name: "Run E2E Tests (Smoke)"
    runs-on: ubuntu-latest
    environment: Dev
    needs: [register_bundles, build_additional_images]
    steps:
      - name: Checkout (default)
        if: ${{ inputs.prRepo == '' }} # if not running for a PR, checkout the default ref for the workflow run
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Checkout (PR)
        if: ${{ inputs.prRepo != '' }} # if running for a PR, checkout the PR commit
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: ${{ inputs.prRepo }}
          ref: ${{ inputs.prRef }}

      - name: Run E2E Tests (Smoke)
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make test-e2e-smoke"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          LOCATION: "${{ secrets.LOCATION }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_USER_NAME: "${{ secrets.TEST_USER_NAME }}"
          TEST_USER_PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          IS_API_SECURED: false

      # For PR builds triggered from comment builds, the GITHUB_REF is set to main
      # so the checks aren't automatically associated with the PR
      # If prHeadSha is specified then explicity mark the checks for that SHA
      - name: Report check status
        if: ${{ inputs.prHeadSha }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # the name must be identical to the one received by the real job
          sha: ${{ inputs.prHeadSha }}
          name: "Deploy PR / Run E2E Tests (Smoke)"
          status: "completed"
          conclusion: "success"

      # - name: Notify dedicated teams channel
      #   uses: sachinkundu/ms-teams-notification@1.4
      #   if: ${{ failure() && (github.ref == 'refs/heads/main' && inputs.prRef == '') }}
      #   continue-on-error: true
      #   with:
      #     github-token: ${{ github.token }}
      #     ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
      #     notification-summary: "E2E Tests (Smoke) failed"
      #     notification-color: dc3545
      #     timezone: Europe/Zurich

      # - name: Notify dedicated teams channel
      #   uses: sachinkundu/ms-teams-notification@1.4
      #   if: ${{ success() && (github.ref == 'refs/heads/main' && inputs.prRef == '') }}
      #   continue-on-error: true
      #   with:
      #     github-token: ${{ github.token }}
      #     ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
      #     notification-summary: "Deployment and tests passed successfully"
      #     notification-color: 28a745
      #     timezone: Europe/Zurich

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: E2E Test Results (Python ${{ matrix.python-version }})
          path: "./e2e_tests/pytest_e2e_smoke.xml"

      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: "./e2e_tests/pytest_e2e_smoke.xml"

  e2e_tests_extended:
    name: "Run E2E Tests (Extended)"
    if: ${{ github.ref == 'refs/heads/main' && inputs.prRef == '' }}
    runs-on: ubuntu-latest
    environment: Dev
    needs: [register_bundles, build_additional_images]
    steps:
      - name: Checkout (default)
        if: ${{ inputs.prRepo == '' }} # if not running for a PR, checkout the default ref for the workflow run
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Checkout (PR)
        if: ${{ inputs.prRepo != '' }} # if running for a PR, checkout the PR commit
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: ${{ inputs.prRepo }}
          ref: ${{ inputs.prRef }}

      - name: Run E2E Tests (Extended)
        uses: ./.github/actions/devcontainer_run_command
        with:
          COMMAND: "make test-e2e-extended"
          ACTIONS_ACR_NAME: ${{ secrets.ACTIONS_ACR_NAME }}
          ACTIONS_ACR_URI: ${{ secrets.ACTIONS_ACR_URI }}
          ACTIONS_ACR_PASSWORD: ${{ secrets.ACTIONS_ACR_PASSWORD }}
          ACTIONS_DEVCONTAINER_TAG: ${{ secrets.ACTIONS_DEVCONTAINER_TAG }}
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          LOCATION: "${{ secrets.LOCATION }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          TEST_APP_ID: "${{ secrets.TEST_APP_ID }}"
          TEST_USER_NAME: "${{ secrets.TEST_USER_NAME }}"
          TEST_USER_PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          IS_API_SECURED: false

      # - name: Notify dedicated teams channel
      #   uses: sachinkundu/ms-teams-notification@1.4
      #   if: ${{ failure() && (github.ref == 'refs/heads/main' && inputs.prRef == '') }}
      #   continue-on-error: true
      #   with:
      #     github-token: ${{ github.token }}
      #     ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
      #     notification-summary: "E2E Tests (Extended) failed"
      #     notification-color: dc3545
      #     timezone: Europe/Zurich

      # - name: Notify dedicated teams channel
      #   uses: sachinkundu/ms-teams-notification@1.4
      #   if: ${{ success() && (github.ref == 'refs/heads/main' && inputs.prRef == '') }}
      #   continue-on-error: true
      #   with:
      #     github-token: ${{ github.token }}
      #     ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
      #     notification-summary: "Deployment and tests passed successfully"
      #     notification-color: 28a745
      #     timezone: Europe/Zurich

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: E2E Test (Extended) Results (Python ${{ matrix.python-version }})
          path: "./e2e_tests/pytest_e2e_extended.xml"

      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: "./e2e_tests/pytest_e2e_extended.xml"

  summary:
    name: Notify Summary
    needs: [e2e_tests_smoke, e2e_tests_extended]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: technote-space/workflow-conclusion-action@v2

      - name: Notify teams channel
        if: env.WORKFLOW_CONCLUSION == 'failure' # notify only if failure
        uses: sachinkundu/ms-teams-notification@1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: "TEST: Failed to deploy from main"
          notification-color: dc3545
          timezone: Europe/Zurich
